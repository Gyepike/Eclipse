#logging.level.root = DEBUG
# https://howtodoinjava.com/spring-boot2/datasource-configuration/
#    spring.datasource.driver-class-name=com.mysql.jdbc.Driver 
#   w e often do not need to specify the driver-class-name, since Spring Boot can deduce it for the most databases from the connection url.
# spring.datasource.driver-class-name=com.mysql.jdbc.Driver  drive load uto / this is old driver 
# Hibernate property values are: create, update, create-drop, validate and none:
# 
# create  Hibernate first drops existing tables, then creates new tables
# update  the object model created based on the mappings (annotations or XML) is compared with the existing schema, and then Hibernate updates the schema according to the diff. It never deletes the existing tables or columns even if they are no more required by the application
# create-drop  similar to create, with the addition that Hibernate will drop the database after all operations are completed. Typically used for unit testing
# validate  Hibernate only validates whether the tables and columns exist, otherwise it throws an exception
# none  this value effectively turns off the DDL generation

# management.endpoints.web.exposure.include=*

spring.datasource.url=jdbc:mysql://localhost:3306/APIDevelopSpringBoot?serverTimezone=UTC&useSSL=false
spring.datasource.username=hbstudent
spring.datasource.password=hbstudent


spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
#spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect
spring.jpa.hibernate.ddl-auto=none
spring.test.database.replace=none  
# no databe we want fail in test src/webapp/WEB-INF/view
spring.mvc.view.prefix: /WEB-INF/view/
spring.mvc.view.suffix: .jsp




# logging level from root we want only info

#logging.file.path=..\\logs
#logging.file.name=/logs/fileName.log
logging.file.path=D:/logs/
#logging.file.name=app.log
 
# logging.file.path=D:\\logs\\logfile3.txt
# logging.level.root=info
#logging.file.name= app.log cannot use both path and filename !!! 
# logging file path
